[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo     = 'cocopon/iceberg.vim'
hook_add = ''' "{{{
  set termguicolors
  colorscheme iceberg
"}}} '''


[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-abolish'


[[plugins]]
repo = 'kana/vim-smartword'
hook_add = ''' "{{{
	map w  <Plug>(smartword-w)
	map b  <Plug>(smartword-b)
	map e  <Plug>(smartword-e)
	map ge  <Plug>(smartword-ge)
<
"}}} '''


[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'thinca/vim-textobj-between'

[[plugins]]
repo = 'thinca/vim-textobj-comment'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'


[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = ''' "{{{
  map R <Plug>(operator-replace)
"}}} '''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = ''' "{{{
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)

  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
  nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
  nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
"}}} '''

[[plugins]]
repo = 'emonkak/vim-operator-sort'
hook_add = ''' "{{{
  map S <Plug>(operator-sort)
"}}} '''

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
hook_add = ''' "{{{
	map y <Plug>(operator-flashy)
	map Y <Plug>(operator-flashy)$
"}}} '''


[[plugins]]
repo = 'rhysd/clever-f.vim'


[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_source = ''' "{{{
  let g:polyglot_disabled = ['rust']
"}}} '''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = ''' "{{{
  let g:rustfmt_autosave_if_config_present = 1
"}}} '''


[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'jreybert/vimagit'


[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = ''' "{{{
  let g:rooter_patterns = ['.git', 'Cargo.toml']
"}}} '''


[[plugins]]
repo = 'liuchengxu/vim-clap'
# hook_add = ''' "{{{
#   :Clap install-binary
# "}}} '''


[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = ''' "{{{
  " TextEdit might fail if hidden is not set.
  set hidden

  " Some servers have issues with backup files, see #649.
  set nobackup
  set nowritebackup

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  
  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
  if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
  else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  endif

  " Use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif
"}}} '''


[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = ''' "{{{
	let g:floaterm_keymap_new    = '<F6>'
	let g:floaterm_keymap_prev   = '<F7>'
	let g:floaterm_keymap_next   = '<F8>'
	let g:floaterm_keymap_toggle = '<F9>'
"}}} '''


[[plugins]]
repo = 'pechorin/any-jump.vim'
hook_add = ''' "{{{
  " Normal mode: Jump to definition under cursore
  nnoremap <leader>J :AnyJump<CR>

  " Visual mode: jump to selected text in visual mode
  xnoremap <leader>J :AnyJumpVisual<CR>

  " Normal mode: open previous opened file (after jump)
  nnoremap <leader>ab :AnyJumpBack<CR>

  " Normal mode: open last closed search window again
  nnoremap <leader>al :AnyJumpLastResults<CR>
"}}} '''

